/*
 * generated by Xtext
 */
package budgeting.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BudgetingGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BudgetingFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BudgetingFile");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibraryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cYearParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BudgetingFile:
		//	Library | Year;
		@Override public ParserRule getRule() { return rule; }

		//Library | Year
		public Alternatives getAlternatives() { return cAlternatives; }

		//Library
		public RuleCall getLibraryParserRuleCall_0() { return cLibraryParserRuleCall_0; }

		//Year
		public RuleCall getYearParserRuleCall_1() { return cYearParserRuleCall_1; }
	}

	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCategoriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCategoriesCategoryParserRuleCall_3_0 = (RuleCall)cCategoriesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Library:
		//	"library" name=ID "{" categories+=Category* "}";
		@Override public ParserRule getRule() { return rule; }

		//"library" name=ID "{" categories+=Category* "}"
		public Group getGroup() { return cGroup; }

		//"library"
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//categories+=Category*
		public Assignment getCategoriesAssignment_3() { return cCategoriesAssignment_3; }

		//Category
		public RuleCall getCategoriesCategoryParserRuleCall_3_0() { return cCategoriesCategoryParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIncomeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIncomeIncomeKeyword_0_0_0 = (Keyword)cIncomeAssignment_0_0.eContents().get(0);
		private final Keyword cExpenseKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Category:
		//	(income?="income" | "expense") name=ID;
		@Override public ParserRule getRule() { return rule; }

		//(income?="income" | "expense") name=ID
		public Group getGroup() { return cGroup; }

		//income?="income" | "expense"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//income?="income"
		public Assignment getIncomeAssignment_0_0() { return cIncomeAssignment_0_0; }

		//"income"
		public Keyword getIncomeIncomeKeyword_0_0_0() { return cIncomeIncomeKeyword_0_0_0; }

		//"expense"
		public Keyword getExpenseKeyword_0_1() { return cExpenseKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class YearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Year");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameINTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cUsesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLibraryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLibraryLibraryCrossReference_2_0 = (CrossReference)cLibraryAssignment_2.eContents().get(0);
		private final RuleCall cLibraryLibraryIDTerminalRuleCall_2_0_1 = (RuleCall)cLibraryLibraryCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMonthsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMonthsMonthParserRuleCall_4_0 = (RuleCall)cMonthsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Year:
		//	name=INT "uses" library=[Library] "{" months+=Month* "}";
		@Override public ParserRule getRule() { return rule; }

		//name=INT "uses" library=[Library] "{" months+=Month* "}"
		public Group getGroup() { return cGroup; }

		//name=INT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//INT
		public RuleCall getNameINTTerminalRuleCall_0_0() { return cNameINTTerminalRuleCall_0_0; }

		//"uses"
		public Keyword getUsesKeyword_1() { return cUsesKeyword_1; }

		//library=[Library]
		public Assignment getLibraryAssignment_2() { return cLibraryAssignment_2; }

		//[Library]
		public CrossReference getLibraryLibraryCrossReference_2_0() { return cLibraryLibraryCrossReference_2_0; }

		//ID
		public RuleCall getLibraryLibraryIDTerminalRuleCall_2_0_1() { return cLibraryLibraryIDTerminalRuleCall_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//months+=Month*
		public Assignment getMonthsAssignment_4() { return cMonthsAssignment_4; }

		//Month
		public RuleCall getMonthsMonthParserRuleCall_4_0() { return cMonthsMonthParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MonthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Month");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameMonthEnumEnumRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cBudgetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBudgetEntriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBudgetEntriesEntryParserRuleCall_3_0 = (RuleCall)cBudgetEntriesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cActualKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActualEntriesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActualEntriesEntryParserRuleCall_7_0 = (RuleCall)cActualEntriesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Month:
		//	name=MonthEnum "budget" "{" budgetEntries+=Entry* "}" "actual" "{" actualEntries+=Entry* "}";
		@Override public ParserRule getRule() { return rule; }

		//name=MonthEnum "budget" "{" budgetEntries+=Entry* "}" "actual" "{" actualEntries+=Entry* "}"
		public Group getGroup() { return cGroup; }

		//name=MonthEnum
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//MonthEnum
		public RuleCall getNameMonthEnumEnumRuleCall_0_0() { return cNameMonthEnumEnumRuleCall_0_0; }

		//"budget"
		public Keyword getBudgetKeyword_1() { return cBudgetKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//budgetEntries+=Entry*
		public Assignment getBudgetEntriesAssignment_3() { return cBudgetEntriesAssignment_3; }

		//Entry
		public RuleCall getBudgetEntriesEntryParserRuleCall_3_0() { return cBudgetEntriesEntryParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//"actual"
		public Keyword getActualKeyword_5() { return cActualKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//actualEntries+=Entry*
		public Assignment getActualEntriesAssignment_7() { return cActualEntriesAssignment_7; }

		//Entry
		public RuleCall getActualEntriesEntryParserRuleCall_7_0() { return cActualEntriesEntryParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCategoryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCategoryCategoryCrossReference_0_0 = (CrossReference)cCategoryAssignment_0.eContents().get(0);
		private final RuleCall cCategoryCategoryIDTerminalRuleCall_0_0_1 = (RuleCall)cCategoryCategoryCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAmountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAmountDOLLARTerminalRuleCall_2_0 = (RuleCall)cAmountAssignment_2.eContents().get(0);
		
		//Entry:
		//	category=[Category] ":" amount=DOLLAR;
		@Override public ParserRule getRule() { return rule; }

		//category=[Category] ":" amount=DOLLAR
		public Group getGroup() { return cGroup; }

		//category=[Category]
		public Assignment getCategoryAssignment_0() { return cCategoryAssignment_0; }

		//[Category]
		public CrossReference getCategoryCategoryCrossReference_0_0() { return cCategoryCategoryCrossReference_0_0; }

		//ID
		public RuleCall getCategoryCategoryIDTerminalRuleCall_0_0_1() { return cCategoryCategoryIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//amount=DOLLAR
		public Assignment getAmountAssignment_2() { return cAmountAssignment_2; }

		//DOLLAR
		public RuleCall getAmountDOLLARTerminalRuleCall_2_0() { return cAmountDOLLARTerminalRuleCall_2_0; }
	}
	
	
	public class MonthEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MonthEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJANUARYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJANUARYJanuaryKeyword_0_0 = (Keyword)cJANUARYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFEBRUARYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFEBRUARYFebruaryKeyword_1_0 = (Keyword)cFEBRUARYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMARCHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMARCHMarchKeyword_2_0 = (Keyword)cMARCHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAPRILEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAPRILAprilKeyword_3_0 = (Keyword)cAPRILEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMAYMayKeyword_4_0 = (Keyword)cMAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cJUNEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cJUNEJuneKeyword_5_0 = (Keyword)cJUNEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cJULYEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cJULYJulyKeyword_6_0 = (Keyword)cJULYEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cAUGUSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cAUGUSTAugustKeyword_7_0 = (Keyword)cAUGUSTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSEPTEMBEREnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSEPTEMBERSeptemberKeyword_8_0 = (Keyword)cSEPTEMBEREnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOCTOBEREnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cOCTOBEROctoberKeyword_9_0 = (Keyword)cOCTOBEREnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNOVEMBEREnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNOVEMBERNovemberKeyword_10_0 = (Keyword)cNOVEMBEREnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDECEMBEREnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDECEMBERDecemberKeyword_11_0 = (Keyword)cDECEMBEREnumLiteralDeclaration_11.eContents().get(0);
		
		//enum MonthEnum:
		//	JANUARY="january" | FEBRUARY="february" | MARCH="march" | APRIL="april" | MAY="may" | JUNE="june" | JULY="july" |
		//	AUGUST="august" | SEPTEMBER="september" | OCTOBER="october" | NOVEMBER="november" | DECEMBER="december";
		public EnumRule getRule() { return rule; }

		//JANUARY="january" | FEBRUARY="february" | MARCH="march" | APRIL="april" | MAY="may" | JUNE="june" | JULY="july" |
		//AUGUST="august" | SEPTEMBER="september" | OCTOBER="october" | NOVEMBER="november" | DECEMBER="december"
		public Alternatives getAlternatives() { return cAlternatives; }

		//JANUARY="january"
		public EnumLiteralDeclaration getJANUARYEnumLiteralDeclaration_0() { return cJANUARYEnumLiteralDeclaration_0; }

		//"january"
		public Keyword getJANUARYJanuaryKeyword_0_0() { return cJANUARYJanuaryKeyword_0_0; }

		//FEBRUARY="february"
		public EnumLiteralDeclaration getFEBRUARYEnumLiteralDeclaration_1() { return cFEBRUARYEnumLiteralDeclaration_1; }

		//"february"
		public Keyword getFEBRUARYFebruaryKeyword_1_0() { return cFEBRUARYFebruaryKeyword_1_0; }

		//MARCH="march"
		public EnumLiteralDeclaration getMARCHEnumLiteralDeclaration_2() { return cMARCHEnumLiteralDeclaration_2; }

		//"march"
		public Keyword getMARCHMarchKeyword_2_0() { return cMARCHMarchKeyword_2_0; }

		//APRIL="april"
		public EnumLiteralDeclaration getAPRILEnumLiteralDeclaration_3() { return cAPRILEnumLiteralDeclaration_3; }

		//"april"
		public Keyword getAPRILAprilKeyword_3_0() { return cAPRILAprilKeyword_3_0; }

		//MAY="may"
		public EnumLiteralDeclaration getMAYEnumLiteralDeclaration_4() { return cMAYEnumLiteralDeclaration_4; }

		//"may"
		public Keyword getMAYMayKeyword_4_0() { return cMAYMayKeyword_4_0; }

		//JUNE="june"
		public EnumLiteralDeclaration getJUNEEnumLiteralDeclaration_5() { return cJUNEEnumLiteralDeclaration_5; }

		//"june"
		public Keyword getJUNEJuneKeyword_5_0() { return cJUNEJuneKeyword_5_0; }

		//JULY="july"
		public EnumLiteralDeclaration getJULYEnumLiteralDeclaration_6() { return cJULYEnumLiteralDeclaration_6; }

		//"july"
		public Keyword getJULYJulyKeyword_6_0() { return cJULYJulyKeyword_6_0; }

		//AUGUST="august"
		public EnumLiteralDeclaration getAUGUSTEnumLiteralDeclaration_7() { return cAUGUSTEnumLiteralDeclaration_7; }

		//"august"
		public Keyword getAUGUSTAugustKeyword_7_0() { return cAUGUSTAugustKeyword_7_0; }

		//SEPTEMBER="september"
		public EnumLiteralDeclaration getSEPTEMBEREnumLiteralDeclaration_8() { return cSEPTEMBEREnumLiteralDeclaration_8; }

		//"september"
		public Keyword getSEPTEMBERSeptemberKeyword_8_0() { return cSEPTEMBERSeptemberKeyword_8_0; }

		//OCTOBER="october"
		public EnumLiteralDeclaration getOCTOBEREnumLiteralDeclaration_9() { return cOCTOBEREnumLiteralDeclaration_9; }

		//"october"
		public Keyword getOCTOBEROctoberKeyword_9_0() { return cOCTOBEROctoberKeyword_9_0; }

		//NOVEMBER="november"
		public EnumLiteralDeclaration getNOVEMBEREnumLiteralDeclaration_10() { return cNOVEMBEREnumLiteralDeclaration_10; }

		//"november"
		public Keyword getNOVEMBERNovemberKeyword_10_0() { return cNOVEMBERNovemberKeyword_10_0; }

		//DECEMBER="december"
		public EnumLiteralDeclaration getDECEMBEREnumLiteralDeclaration_11() { return cDECEMBEREnumLiteralDeclaration_11; }

		//"december"
		public Keyword getDECEMBERDecemberKeyword_11_0() { return cDECEMBERDecemberKeyword_11_0; }
	}
	
	private final BudgetingFileElements pBudgetingFile;
	private final LibraryElements pLibrary;
	private final CategoryElements pCategory;
	private final YearElements pYear;
	private final MonthElements pMonth;
	private final MonthEnumElements unknownRuleMonthEnum;
	private final EntryElements pEntry;
	private final TerminalRule tDOLLAR;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BudgetingGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBudgetingFile = new BudgetingFileElements();
		this.pLibrary = new LibraryElements();
		this.pCategory = new CategoryElements();
		this.pYear = new YearElements();
		this.pMonth = new MonthElements();
		this.unknownRuleMonthEnum = new MonthEnumElements();
		this.pEntry = new EntryElements();
		this.tDOLLAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOLLAR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("budgeting.Budgeting".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BudgetingFile:
	//	Library | Year;
	public BudgetingFileElements getBudgetingFileAccess() {
		return pBudgetingFile;
	}
	
	public ParserRule getBudgetingFileRule() {
		return getBudgetingFileAccess().getRule();
	}

	//Library:
	//	"library" name=ID "{" categories+=Category* "}";
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//Category:
	//	(income?="income" | "expense") name=ID;
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//Year:
	//	name=INT "uses" library=[Library] "{" months+=Month* "}";
	public YearElements getYearAccess() {
		return pYear;
	}
	
	public ParserRule getYearRule() {
		return getYearAccess().getRule();
	}

	//Month:
	//	name=MonthEnum "budget" "{" budgetEntries+=Entry* "}" "actual" "{" actualEntries+=Entry* "}";
	public MonthElements getMonthAccess() {
		return pMonth;
	}
	
	public ParserRule getMonthRule() {
		return getMonthAccess().getRule();
	}

	//enum MonthEnum:
	//	JANUARY="january" | FEBRUARY="february" | MARCH="march" | APRIL="april" | MAY="may" | JUNE="june" | JULY="july" |
	//	AUGUST="august" | SEPTEMBER="september" | OCTOBER="october" | NOVEMBER="november" | DECEMBER="december";
	public MonthEnumElements getMonthEnumAccess() {
		return unknownRuleMonthEnum;
	}
	
	public EnumRule getMonthEnumRule() {
		return getMonthEnumAccess().getRule();
	}

	//Entry:
	//	category=[Category] ":" amount=DOLLAR;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//terminal DOLLAR returns ecore::ELong:
	//	INT "." "0".."9" "0".."9";
	public TerminalRule getDOLLARRule() {
		return tDOLLAR;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
