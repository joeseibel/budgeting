/*
 * generated by Xtext
 */
grammar InternalBudgeting;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package budgeting.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package budgeting.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import budgeting.services.BudgetingGrammarAccess;

}

@parser::members {
 
 	private BudgetingGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BudgetingGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleBudgetingFile
entryRuleBudgetingFile 
:
{ before(grammarAccess.getBudgetingFileRule()); }
	 ruleBudgetingFile
{ after(grammarAccess.getBudgetingFileRule()); } 
	 EOF 
;

// Rule BudgetingFile
ruleBudgetingFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBudgetingFileAccess().getAlternatives()); }
(rule__BudgetingFile__Alternatives)
{ after(grammarAccess.getBudgetingFileAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLibrary
entryRuleLibrary 
:
{ before(grammarAccess.getLibraryRule()); }
	 ruleLibrary
{ after(grammarAccess.getLibraryRule()); } 
	 EOF 
;

// Rule Library
ruleLibrary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLibraryAccess().getGroup()); }
(rule__Library__Group__0)
{ after(grammarAccess.getLibraryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCategory
entryRuleCategory 
:
{ before(grammarAccess.getCategoryRule()); }
	 ruleCategory
{ after(grammarAccess.getCategoryRule()); } 
	 EOF 
;

// Rule Category
ruleCategory
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCategoryAccess().getGroup()); }
(rule__Category__Group__0)
{ after(grammarAccess.getCategoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleYear
entryRuleYear 
:
{ before(grammarAccess.getYearRule()); }
	 ruleYear
{ after(grammarAccess.getYearRule()); } 
	 EOF 
;

// Rule Year
ruleYear
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getYearAccess().getGroup()); }
(rule__Year__Group__0)
{ after(grammarAccess.getYearAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMonth
entryRuleMonth 
:
{ before(grammarAccess.getMonthRule()); }
	 ruleMonth
{ after(grammarAccess.getMonthRule()); } 
	 EOF 
;

// Rule Month
ruleMonth
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMonthAccess().getGroup()); }
(rule__Month__Group__0)
{ after(grammarAccess.getMonthAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntry
entryRuleEntry 
:
{ before(grammarAccess.getEntryRule()); }
	 ruleEntry
{ after(grammarAccess.getEntryRule()); } 
	 EOF 
;

// Rule Entry
ruleEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntryAccess().getGroup()); }
(rule__Entry__Group__0)
{ after(grammarAccess.getEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule MonthEnum
ruleMonthEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthEnumAccess().getAlternatives()); }
(rule__MonthEnum__Alternatives)
{ after(grammarAccess.getMonthEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BudgetingFile__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBudgetingFileAccess().getLibraryParserRuleCall_0()); }
	ruleLibrary
{ after(grammarAccess.getBudgetingFileAccess().getLibraryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBudgetingFileAccess().getYearParserRuleCall_1()); }
	ruleYear
{ after(grammarAccess.getBudgetingFileAccess().getYearParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getIncomeAssignment_0_0()); }
(rule__Category__IncomeAssignment_0_0)
{ after(grammarAccess.getCategoryAccess().getIncomeAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getCategoryAccess().getExpenseKeyword_0_1()); }

	'expense' 

{ after(grammarAccess.getCategoryAccess().getExpenseKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MonthEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthEnumAccess().getJANUARYEnumLiteralDeclaration_0()); }
(	'january' 
)
{ after(grammarAccess.getMonthEnumAccess().getJANUARYEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getFEBRUARYEnumLiteralDeclaration_1()); }
(	'february' 
)
{ after(grammarAccess.getMonthEnumAccess().getFEBRUARYEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getMARCHEnumLiteralDeclaration_2()); }
(	'march' 
)
{ after(grammarAccess.getMonthEnumAccess().getMARCHEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getAPRILEnumLiteralDeclaration_3()); }
(	'april' 
)
{ after(grammarAccess.getMonthEnumAccess().getAPRILEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getMAYEnumLiteralDeclaration_4()); }
(	'may' 
)
{ after(grammarAccess.getMonthEnumAccess().getMAYEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getJUNEEnumLiteralDeclaration_5()); }
(	'june' 
)
{ after(grammarAccess.getMonthEnumAccess().getJUNEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getJULYEnumLiteralDeclaration_6()); }
(	'july' 
)
{ after(grammarAccess.getMonthEnumAccess().getJULYEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getAUGUSTEnumLiteralDeclaration_7()); }
(	'august' 
)
{ after(grammarAccess.getMonthEnumAccess().getAUGUSTEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getSEPTEMBEREnumLiteralDeclaration_8()); }
(	'september' 
)
{ after(grammarAccess.getMonthEnumAccess().getSEPTEMBEREnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getOCTOBEREnumLiteralDeclaration_9()); }
(	'october' 
)
{ after(grammarAccess.getMonthEnumAccess().getOCTOBEREnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getNOVEMBEREnumLiteralDeclaration_10()); }
(	'november' 
)
{ after(grammarAccess.getMonthEnumAccess().getNOVEMBEREnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getMonthEnumAccess().getDECEMBEREnumLiteralDeclaration_11()); }
(	'december' 
)
{ after(grammarAccess.getMonthEnumAccess().getDECEMBEREnumLiteralDeclaration_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Library__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Library__Group__0__Impl
	rule__Library__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibraryAccess().getLibraryKeyword_0()); }

	'library' 

{ after(grammarAccess.getLibraryAccess().getLibraryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Library__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Library__Group__1__Impl
	rule__Library__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibraryAccess().getNameAssignment_1()); }
(rule__Library__NameAssignment_1)
{ after(grammarAccess.getLibraryAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Library__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Library__Group__2__Impl
	rule__Library__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibraryAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getLibraryAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Library__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Library__Group__3__Impl
	rule__Library__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibraryAccess().getCategoriesAssignment_3()); }
(rule__Library__CategoriesAssignment_3)*
{ after(grammarAccess.getLibraryAccess().getCategoriesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Library__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Library__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Library__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibraryAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getLibraryAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Category__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Category__Group__0__Impl
	rule__Category__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getAlternatives_0()); }
(rule__Category__Alternatives_0)
{ after(grammarAccess.getCategoryAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Category__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Category__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getNameAssignment_1()); }
(rule__Category__NameAssignment_1)
{ after(grammarAccess.getCategoryAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Year__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Year__Group__0__Impl
	rule__Year__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Year__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getNameAssignment_0()); }
(rule__Year__NameAssignment_0)
{ after(grammarAccess.getYearAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Year__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Year__Group__1__Impl
	rule__Year__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Year__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getUsesKeyword_1()); }

	'uses' 

{ after(grammarAccess.getYearAccess().getUsesKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Year__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Year__Group__2__Impl
	rule__Year__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Year__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getLibraryAssignment_2()); }
(rule__Year__LibraryAssignment_2)
{ after(grammarAccess.getYearAccess().getLibraryAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Year__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Year__Group__3__Impl
	rule__Year__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Year__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getYearAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Year__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Year__Group__4__Impl
	rule__Year__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Year__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getMonthsAssignment_4()); }
(rule__Year__MonthsAssignment_4)*
{ after(grammarAccess.getYearAccess().getMonthsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Year__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Year__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Year__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getYearAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Month__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__0__Impl
	rule__Month__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getNameAssignment_0()); }
(rule__Month__NameAssignment_0)
{ after(grammarAccess.getMonthAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Month__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__1__Impl
	rule__Month__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getBudgetKeyword_1()); }

	'budget' 

{ after(grammarAccess.getMonthAccess().getBudgetKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Month__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__2__Impl
	rule__Month__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMonthAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Month__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__3__Impl
	rule__Month__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getBudgetEntriesAssignment_3()); }
(rule__Month__BudgetEntriesAssignment_3)*
{ after(grammarAccess.getMonthAccess().getBudgetEntriesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Month__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__4__Impl
	rule__Month__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getMonthAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Month__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__5__Impl
	rule__Month__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getActualKeyword_5()); }

	'actual' 

{ after(grammarAccess.getMonthAccess().getActualKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Month__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__6__Impl
	rule__Month__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getLeftCurlyBracketKeyword_6()); }

	'{' 

{ after(grammarAccess.getMonthAccess().getLeftCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Month__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__7__Impl
	rule__Month__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getActualEntriesAssignment_7()); }
(rule__Month__ActualEntriesAssignment_7)*
{ after(grammarAccess.getMonthAccess().getActualEntriesAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Month__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Month__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Month__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getMonthAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Entry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entry__Group__0__Impl
	rule__Entry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryAccess().getCategoryAssignment_0()); }
(rule__Entry__CategoryAssignment_0)
{ after(grammarAccess.getEntryAccess().getCategoryAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entry__Group__1__Impl
	rule__Entry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getEntryAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryAccess().getAmountAssignment_2()); }
(rule__Entry__AmountAssignment_2)
{ after(grammarAccess.getEntryAccess().getAmountAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Library__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibraryAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLibraryAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Library__CategoriesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLibraryAccess().getCategoriesCategoryParserRuleCall_3_0()); }
	ruleCategory{ after(grammarAccess.getLibraryAccess().getCategoriesCategoryParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Category__IncomeAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getIncomeIncomeKeyword_0_0_0()); }
(
{ before(grammarAccess.getCategoryAccess().getIncomeIncomeKeyword_0_0_0()); }

	'income' 

{ after(grammarAccess.getCategoryAccess().getIncomeIncomeKeyword_0_0_0()); }
)

{ after(grammarAccess.getCategoryAccess().getIncomeIncomeKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Category__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Year__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getNameINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getYearAccess().getNameINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Year__LibraryAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getLibraryLibraryCrossReference_2_0()); }
(
{ before(grammarAccess.getYearAccess().getLibraryLibraryIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getYearAccess().getLibraryLibraryIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getYearAccess().getLibraryLibraryCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Year__MonthsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getYearAccess().getMonthsMonthParserRuleCall_4_0()); }
	ruleMonth{ after(grammarAccess.getYearAccess().getMonthsMonthParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Month__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getNameMonthEnumEnumRuleCall_0_0()); }
	ruleMonthEnum{ after(grammarAccess.getMonthAccess().getNameMonthEnumEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Month__BudgetEntriesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getBudgetEntriesEntryParserRuleCall_3_0()); }
	ruleEntry{ after(grammarAccess.getMonthAccess().getBudgetEntriesEntryParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Month__ActualEntriesAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMonthAccess().getActualEntriesEntryParserRuleCall_7_0()); }
	ruleEntry{ after(grammarAccess.getMonthAccess().getActualEntriesEntryParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__CategoryAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryAccess().getCategoryCategoryCrossReference_0_0()); }
(
{ before(grammarAccess.getEntryAccess().getCategoryCategoryIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEntryAccess().getCategoryCategoryIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEntryAccess().getCategoryCategoryCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__AmountAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryAccess().getAmountDOLLARTerminalRuleCall_2_0()); }
	RULE_DOLLAR{ after(grammarAccess.getEntryAccess().getAmountDOLLARTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOLLAR : RULE_INT '.' '0'..'9' '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


