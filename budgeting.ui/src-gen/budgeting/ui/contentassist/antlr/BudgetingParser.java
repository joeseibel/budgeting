/*
 * generated by Xtext
 */
package budgeting.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import budgeting.services.BudgetingGrammarAccess;

public class BudgetingParser extends AbstractContentAssistParser {
	
	@Inject
	private BudgetingGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected budgeting.ui.contentassist.antlr.internal.InternalBudgetingParser createParser() {
		budgeting.ui.contentassist.antlr.internal.InternalBudgetingParser result = new budgeting.ui.contentassist.antlr.internal.InternalBudgetingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBudgetingFileAccess().getAlternatives(), "rule__BudgetingFile__Alternatives");
					put(grammarAccess.getCategoryAccess().getAlternatives(), "rule__Category__Alternatives");
					put(grammarAccess.getBudgetEntryAccess().getAlternatives(), "rule__BudgetEntry__Alternatives");
					put(grammarAccess.getActualEntryAccess().getAlternatives(), "rule__ActualEntry__Alternatives");
					put(grammarAccess.getTransactionAccess().getAlternatives(), "rule__Transaction__Alternatives");
					put(grammarAccess.getDoubleAccess().getAlternatives(), "rule__Double__Alternatives");
					put(grammarAccess.getMonthEnumAccess().getAlternatives(), "rule__MonthEnum__Alternatives");
					put(grammarAccess.getLibraryAccess().getGroup(), "rule__Library__Group__0");
					put(grammarAccess.getCategoryAccess().getGroup_0(), "rule__Category__Group_0__0");
					put(grammarAccess.getCategoryAccess().getGroup_1(), "rule__Category__Group_1__0");
					put(grammarAccess.getCategoryAccess().getGroup_1_3(), "rule__Category__Group_1_3__0");
					put(grammarAccess.getCategoryAccess().getGroup_1_3_2(), "rule__Category__Group_1_3_2__0");
					put(grammarAccess.getYearAccess().getGroup(), "rule__Year__Group__0");
					put(grammarAccess.getMonthAccess().getGroup(), "rule__Month__Group__0");
					put(grammarAccess.getBudgetEntryAccess().getGroup_0(), "rule__BudgetEntry__Group_0__0");
					put(grammarAccess.getBudgetEntryAccess().getGroup_1(), "rule__BudgetEntry__Group_1__0");
					put(grammarAccess.getActualEntryAccess().getGroup_0(), "rule__ActualEntry__Group_0__0");
					put(grammarAccess.getActualEntryAccess().getGroup_1(), "rule__ActualEntry__Group_1__0");
					put(grammarAccess.getTransactionAccess().getGroup_0(), "rule__Transaction__Group_0__0");
					put(grammarAccess.getTransactionAccess().getGroup_0_3(), "rule__Transaction__Group_0_3__0");
					put(grammarAccess.getTransactionAccess().getGroup_1(), "rule__Transaction__Group_1__0");
					put(grammarAccess.getEntryAccess().getGroup(), "rule__Entry__Group__0");
					put(grammarAccess.getLibraryAccess().getNameAssignment_1(), "rule__Library__NameAssignment_1");
					put(grammarAccess.getLibraryAccess().getCategoriesAssignment_3(), "rule__Library__CategoriesAssignment_3");
					put(grammarAccess.getCategoryAccess().getNameAssignment_0_2(), "rule__Category__NameAssignment_0_2");
					put(grammarAccess.getCategoryAccess().getNameAssignment_1_2(), "rule__Category__NameAssignment_1_2");
					put(grammarAccess.getCategoryAccess().getPatternsAssignment_1_3_1(), "rule__Category__PatternsAssignment_1_3_1");
					put(grammarAccess.getCategoryAccess().getPatternsAssignment_1_3_2_1(), "rule__Category__PatternsAssignment_1_3_2_1");
					put(grammarAccess.getYearAccess().getNameAssignment_0(), "rule__Year__NameAssignment_0");
					put(grammarAccess.getYearAccess().getLibraryAssignment_2(), "rule__Year__LibraryAssignment_2");
					put(grammarAccess.getYearAccess().getMonthsAssignment_4(), "rule__Year__MonthsAssignment_4");
					put(grammarAccess.getMonthAccess().getNameAssignment_0(), "rule__Month__NameAssignment_0");
					put(grammarAccess.getMonthAccess().getBudgetEntriesAssignment_3(), "rule__Month__BudgetEntriesAssignment_3");
					put(grammarAccess.getMonthAccess().getActualEntriesAssignment_7(), "rule__Month__ActualEntriesAssignment_7");
					put(grammarAccess.getBudgetEntryAccess().getCategoryAssignment_0_1(), "rule__BudgetEntry__CategoryAssignment_0_1");
					put(grammarAccess.getBudgetEntryAccess().getAmountAssignment_0_3(), "rule__BudgetEntry__AmountAssignment_0_3");
					put(grammarAccess.getBudgetEntryAccess().getCategoryAssignment_1_1(), "rule__BudgetEntry__CategoryAssignment_1_1");
					put(grammarAccess.getBudgetEntryAccess().getBaseEntryAssignment_1_3(), "rule__BudgetEntry__BaseEntryAssignment_1_3");
					put(grammarAccess.getBudgetEntryAccess().getFactorAssignment_1_5(), "rule__BudgetEntry__FactorAssignment_1_5");
					put(grammarAccess.getActualEntryAccess().getCategoryAssignment_0_1(), "rule__ActualEntry__CategoryAssignment_0_1");
					put(grammarAccess.getActualEntryAccess().getAmountAssignment_0_3(), "rule__ActualEntry__AmountAssignment_0_3");
					put(grammarAccess.getActualEntryAccess().getCategoryAssignment_1_1(), "rule__ActualEntry__CategoryAssignment_1_1");
					put(grammarAccess.getActualEntryAccess().getTransactionsAssignment_1_3(), "rule__ActualEntry__TransactionsAssignment_1_3");
					put(grammarAccess.getTransactionAccess().getAmountAssignment_0_2(), "rule__Transaction__AmountAssignment_0_2");
					put(grammarAccess.getTransactionAccess().getDayAssignment_0_3_1(), "rule__Transaction__DayAssignment_0_3_1");
					put(grammarAccess.getTransactionAccess().getAmountAssignment_1_2(), "rule__Transaction__AmountAssignment_1_2");
					put(grammarAccess.getTransactionAccess().getDayAssignment_1_4(), "rule__Transaction__DayAssignment_1_4");
					put(grammarAccess.getTransactionAccess().getFromAssignment_1_6(), "rule__Transaction__FromAssignment_1_6");
					put(grammarAccess.getEntryAccess().getCategoryAssignment_0(), "rule__Entry__CategoryAssignment_0");
					put(grammarAccess.getEntryAccess().getAmountAssignment_2(), "rule__Entry__AmountAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			budgeting.ui.contentassist.antlr.internal.InternalBudgetingParser typedParser = (budgeting.ui.contentassist.antlr.internal.InternalBudgetingParser) parser;
			typedParser.entryRuleBudgetingFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BudgetingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BudgetingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
